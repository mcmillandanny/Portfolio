{"version":3,"sources":["pixi-particles.js"],"names":["f","exports","module","define","amd","g","window","global","self","pixiParticles","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","_dereq_","__extends","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","value","Particle_1","Texture","PIXI","AnimatedParticle","_super","emitter","_this","textures","duration","framerate","elapsed","loop","init","Particle_init","maxLife","applyArt","art","update","delta","lerp","Particle_update","frame","texture","EMPTY","destroy","Particle_destroy","parseArt","data","output","tex","outTextures","outArr","j","push","fromImage","dupe","count","default","ParticleUtils_1","PropertyNode_1","PolygonalChain_1","ticker","shared","helperPoint","Point","Emitter","particleParent","particleImages","config","_particleConstructor","startAlpha","startSpeed","minimumSpeedMultiplier","acceleration","maxSpeed","NaN","startScale","minimumScaleMultiplier","startColor","minLifetime","maxLifetime","minStartRotation","maxStartRotation","noRotation","minRotationSpeed","maxRotationSpeed","particleBlendMode","customEase","extraData","_frequency","spawnChance","maxParticles","emitterLifetime","spawnPos","spawnType","_spawnFunc","spawnRect","spawnCircle","spawnPolygonalChain","particlesPerWave","particleSpacing","angleStart","rotation","ownerPos","_prevEmitterPos","_prevPosIsValid","_posChanged","_parent","addAtBack","particleCount","_emit","_spawnTimer","_emitterLife","_activeParticlesFirst","_activeParticlesLast","_poolFirst","_origConfig","_origArt","_autoUpdate","_destroyWhenComplete","_completeCallback","parent","recycle","rotate","updateSpawnPos","updateOwnerPos","get","set","enumerable","configurable","cleanup","particle","next","isArray","slice","partClass","alpha","createList","speed","x","y","scale","color","startRotation","min","max","rotationSpeed","lifetime","getBlendMode","blendMode","ease","generateEase","parseData","_spawnRect","Rectangle","w","h","_spawnCircle","Circle","_spawnRing","minRadius","minR","_spawnBurst","_spawnPoint","_spawnPolygonalChain","spawnPolygon","frequency","pos","clone","emit","undefined","autoUpdate","prev","removeChild","newRot","diff","rotatePoint","resetPositionTracking","remove","add","playOnceAndDestroy","callback","playOnce","settings","TARGET_FPMS","prevX","prevY","curX","curY","Math","random","emitPosX","emitPosY","len","particleConstructor","floor","alphaList","reset","speedMultiplier","speedList","scaleMultiplier","scaleList","colorList","addChildAt","addChild","children","shift","pop","index","indexOf","splice","unshift","position","width","height","radius","angle","getRandomPoint","PropertyList_1","Sprite","Particle","anchor","velocity","age","_doAlpha","_doScale","_doSpeed","_doAcceleration","_doColor","_doNormalMovement","_oneOverLife","Sprite_destroy","kill","current","DEG_TO_RADS","tint","combineRGBComponents","visible","interpolate","normalize","scaleBy","currentSpeed","atan2","verbose","baseTexture","console","warn","BLEND_MODES","ParticleUtils","PI","sin","c","cos","xnew","ynew","point","oneOverLen","sqrt","hexToRGB","charAt","substr","parseInt","segments","qty","oneOverQty","time","cp","name","NORMAL","toUpperCase","replace","createSteppedGradient","list","numSteps","first","isStepped","currentNode","nextIndex","curVal","nextVal","MATH_FUNCS","WHITELISTER","RegExp","concat","join","parsePath","pathString","matches","match","Function","PathParticle","path","initialRotation","initialPosition","movement","error","PolygonalChain","countingLengths","totalLength","p1","p2","chain","prevPoint","second","_a","segLength","out","rand","chosenSeg","PropertyList","isColor","isSimple","intColorSimple","intValueSimple","intColorStepped","intValueStepped","intColorComplex","intValueComplex","PropertyNode","array","node","start","end","ParticleUtils_js_1","Particle_js_1","Emitter_js_1","PathParticle_js_1","AnimatedParticle_js_1","particles","prop"],"mappings":"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","file":"pixi-particles.js","sourcesContent":["/*!\n * pixi-particles - v3.2.0\n * Compiled Mon, 18 Feb 2019 15:03:44 UTC\n *\n * pixi-particles is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.pixiParticles = f()}})(function(){var define,module,exports;return (function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(_dereq_,module,exports){\r\n\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Particle_1 = _dereq_(\"./Particle\");\r\nvar Texture = PIXI.Texture;\r\n/**\r\n * An individual particle image with an animation. Art data passed to the emitter must be\r\n * formatted in a particular way for AnimatedParticle to be able to handle it:\r\n *\r\n *     {\r\n *         //framerate is required. It is the animation speed of the particle in frames per\r\n *         //second.\r\n *         //A value of \"matchLife\" causes the animation to match the lifetime of an individual\r\n *         //particle, instead of at a constant framerate. This causes the animation to play\r\n *         //through one time, completing when the particle expires.\r\n *         framerate: 6,\r\n *         //loop is optional, and defaults to false.\r\n *         loop: true,\r\n *         //textures is required, and can be an array of any (non-zero) length.\r\n *         textures: [\r\n *             //each entry represents a single texture that should be used for one or more\r\n *             //frames. Any strings will be converted to Textures with Texture.fromImage().\r\n *             //Instances of PIXI.Texture will be used directly.\r\n *             \"animFrame1.png\",\r\n *             //entries can be an object with a 'count' property, telling AnimatedParticle to\r\n *             //use that texture for 'count' frames sequentially.\r\n *             {\r\n *                 texture: \"animFrame2.png\",\r\n *                 count: 3\r\n *             },\r\n *             \"animFrame3.png\"\r\n *         ]\r\n *     }\r\n *\r\n * @memberof PIXI.particles\r\n * @class AnimatedParticle\r\n * @extends PIXI.particles.Particle\r\n * @constructor\r\n * @param {PIXI.particles.Emitter} emitter The emitter that controls this AnimatedParticle.\r\n */\r\nvar AnimatedParticle = /** @class */ (function (_super) {\r\n    __extends(AnimatedParticle, _super);\r\n    function AnimatedParticle(emitter) {\r\n        var _this = _super.call(this, emitter) || this;\r\n        _this.textures = null;\r\n        _this.duration = 0;\r\n        _this.framerate = 0;\r\n        _this.elapsed = 0;\r\n        _this.loop = false;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Initializes the particle for use, based on the properties that have to\r\n     * have been set already on the particle.\r\n     * @method PIXI.particles.AnimatedParticle#init\r\n     */\r\n    AnimatedParticle.prototype.init = function () {\r\n        this.Particle_init();\r\n        this.elapsed = 0;\r\n        //if the animation needs to match the particle's life, then cacluate variables\r\n        if (this.framerate < 0) {\r\n            this.duration = this.maxLife;\r\n            this.framerate = this.textures.length / this.duration;\r\n        }\r\n    };\r\n    /**\r\n     * Sets the textures for the particle.\r\n     * @method PIXI.particles.AnimatedParticle#applyArt\r\n     * @param {Array} art An array of PIXI.Texture objects for this animated particle.\r\n     */\r\n    AnimatedParticle.prototype.applyArt = function (art) {\r\n        this.textures = art.textures;\r\n        this.framerate = art.framerate;\r\n        this.duration = art.duration;\r\n        this.loop = art.loop;\r\n    };\r\n    /**\r\n     * Updates the particle.\r\n     * @method PIXI.particles.AnimatedParticle#update\r\n     * @param {Number} delta Time elapsed since the previous frame, in __seconds__.\r\n     */\r\n    AnimatedParticle.prototype.update = function (delta) {\r\n        var lerp = this.Particle_update(delta);\r\n        //only animate the particle if it is still alive\r\n        if (lerp >= 0) {\r\n            this.elapsed += delta;\r\n            if (this.elapsed > this.duration) {\r\n                //loop elapsed back around\r\n                if (this.loop)\r\n                    this.elapsed = this.elapsed % this.duration;\r\n                else\r\n                    this.elapsed = this.duration - 0.000001;\r\n            }\r\n            var frame = (this.elapsed * this.framerate + 0.0000001) | 0;\r\n            this.texture = this.textures[frame] || PIXI.Texture.EMPTY;\r\n        }\r\n        return lerp;\r\n    };\r\n    /**\r\n     * Destroys the particle, removing references and preventing future use.\r\n     * @method PIXI.particles.AnimatedParticle#destroy\r\n     */\r\n    AnimatedParticle.prototype.destroy = function () {\r\n        this.Particle_destroy();\r\n        this.textures = null;\r\n    };\r\n    /**\r\n     * Checks over the art that was passed to the Emitter's init() function, to do any special\r\n     * modifications to prepare it ahead of time.\r\n     * @method PIXI.particles.AnimatedParticle.parseArt\r\n     * @static\r\n     * @param  {Array} art The array of art data, properly formatted for AnimatedParticle.\r\n     * @return {Array} The art, after any needed modifications.\r\n     */\r\n    AnimatedParticle.parseArt = function (art) {\r\n        var data, output, textures, tex, outTextures;\r\n        var outArr = [];\r\n        for (var i = 0; i < art.length; ++i) {\r\n            data = art[i];\r\n            outArr[i] = output = {};\r\n            output.textures = outTextures = [];\r\n            textures = data.textures;\r\n            for (var j = 0; j < textures.length; ++j) {\r\n                tex = textures[j];\r\n                if (typeof tex == \"string\")\r\n                    outTextures.push(Texture.fromImage(tex));\r\n                else if (tex instanceof Texture)\r\n                    outTextures.push(tex);\r\n                else {\r\n                    var dupe = tex.count || 1;\r\n                    if (typeof tex.texture == \"string\")\r\n                        tex = Texture.fromImage(tex.texture);\r\n                    else\r\n                        tex = tex.texture;\r\n                    for (; dupe > 0; --dupe) {\r\n                        outTextures.push(tex);\r\n                    }\r\n                }\r\n            }\r\n            //use these values to signify that the animation should match the particle life time.\r\n            if (data.framerate == \"matchLife\") {\r\n                //-1 means that it should be calculated\r\n                output.framerate = -1;\r\n                output.duration = 0;\r\n                output.loop = false;\r\n            }\r\n            else {\r\n                //determine if the animation should loop\r\n                output.loop = !!data.loop;\r\n                //get the framerate, default to 60\r\n                output.framerate = data.framerate > 0 ? data.framerate : 60;\r\n                //determine the duration\r\n                output.duration = outTextures.length / output.framerate;\r\n            }\r\n        }\r\n        return outArr;\r\n    };\r\n    return AnimatedParticle;\r\n}(Particle_1.default));\r\nexports.default = AnimatedParticle;\r\n\r\n},{\"./Particle\":3}],2:[function(_dereq_,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ParticleUtils_1 = _dereq_(\"./ParticleUtils\");\r\nvar Particle_1 = _dereq_(\"./Particle\");\r\nvar PropertyNode_1 = _dereq_(\"./PropertyNode\");\r\nvar PolygonalChain_1 = _dereq_(\"./PolygonalChain\");\r\nvar ticker = PIXI.ticker.shared;\r\nvar helperPoint = new PIXI.Point();\r\n/**\r\n * A particle emitter.\r\n * @memberof PIXI.particles\r\n * @class Emitter\r\n * @constructor\r\n * @param {PIXI.Container} particleParent The container to add the\r\n *                                                     particles to.\r\n * @param {Array|PIXI.Texture|String} [particleImages] A texture or array of textures to use\r\n *                                                     for the particles. Strings will be turned\r\n *                                                     into textures via Texture.fromImage().\r\n * @param {Object} [config] A configuration object containing settings for the emitter.\r\n * @param {Boolean} [config.emit=true] If config.emit is explicitly passed as false, the Emitter\r\n *                                     will start disabled.\r\n * @param {Boolean} [config.autoUpdate=false] If config.emit is explicitly passed as true, the Emitter\r\n *                                     will automatically call update via the PIXI shared ticker.\r\n */\r\nvar Emitter = /** @class */ (function () {\r\n    function Emitter(particleParent, particleImages, config) {\r\n        this._particleConstructor = Particle_1.default;\r\n        //properties for individual particles\r\n        this.particleImages = null;\r\n        this.startAlpha = null;\r\n        this.startSpeed = null;\r\n        this.minimumSpeedMultiplier = 1;\r\n        this.acceleration = null;\r\n        this.maxSpeed = NaN;\r\n        this.startScale = null;\r\n        this.minimumScaleMultiplier = 1;\r\n        this.startColor = null;\r\n        this.minLifetime = 0;\r\n        this.maxLifetime = 0;\r\n        this.minStartRotation = 0;\r\n        this.maxStartRotation = 0;\r\n        this.noRotation = false;\r\n        this.minRotationSpeed = 0;\r\n        this.maxRotationSpeed = 0;\r\n        this.particleBlendMode = 0;\r\n        this.customEase = null;\r\n        this.extraData = null;\r\n        //properties for spawning particles\r\n        this._frequency = 1;\r\n        this.spawnChance = 1;\r\n        this.maxParticles = 1000;\r\n        this.emitterLifetime = -1;\r\n        this.spawnPos = null;\r\n        this.spawnType = null;\r\n        this._spawnFunc = null;\r\n        this.spawnRect = null;\r\n        this.spawnCircle = null;\r\n        this.spawnPolygonalChain = null;\r\n        this.particlesPerWave = 1;\r\n        this.particleSpacing = 0;\r\n        this.angleStart = 0;\r\n        //emitter properties\r\n        this.rotation = 0;\r\n        this.ownerPos = null;\r\n        this._prevEmitterPos = null;\r\n        this._prevPosIsValid = false;\r\n        this._posChanged = false;\r\n        this._parent = null;\r\n        this.addAtBack = false;\r\n        this.particleCount = 0;\r\n        this._emit = false;\r\n        this._spawnTimer = 0;\r\n        this._emitterLife = -1;\r\n        this._activeParticlesFirst = null;\r\n        this._activeParticlesLast = null;\r\n        this._poolFirst = null;\r\n        this._origConfig = null;\r\n        this._origArt = null;\r\n        this._autoUpdate = false;\r\n        this._destroyWhenComplete = false;\r\n        this._completeCallback = null;\r\n        //set the initial parent\r\n        this.parent = particleParent;\r\n        if (particleImages && config)\r\n            this.init(particleImages, config);\r\n        //save often used functions on the instance instead of the prototype for better speed\r\n        this.recycle = this.recycle;\r\n        this.update = this.update;\r\n        this.rotate = this.rotate;\r\n        this.updateSpawnPos = this.updateSpawnPos;\r\n        this.updateOwnerPos = this.updateOwnerPos;\r\n    }\r\n    Object.defineProperty(Emitter.prototype, \"frequency\", {\r\n        /**\r\n         * Time between particle spawns in seconds. If this value is not a number greater than 0,\r\n         * it will be set to 1 (particle per second) to prevent infinite loops.\r\n         * @member {Number} PIXI.particles.Emitter#frequency\r\n         */\r\n        get: function () { return this._frequency; },\r\n        set: function (value) {\r\n            //do some error checking to prevent infinite loops\r\n            if (typeof value == \"number\" && value > 0)\r\n                this._frequency = value;\r\n            else\r\n                this._frequency = 1;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Emitter.prototype, \"particleConstructor\", {\r\n        /**\r\n         * The constructor used to create new particles. The default is\r\n         * the built in Particle class. Setting this will dump any active or\r\n         * pooled particles, if the emitter has already been used.\r\n         * @member {Function} PIXI.particles.Emitter#particleConstructor\r\n         */\r\n        get: function () { return this._particleConstructor; },\r\n        set: function (value) {\r\n            if (value != this._particleConstructor) {\r\n                this._particleConstructor = value;\r\n                //clean up existing particles\r\n                this.cleanup();\r\n                //scrap all the particles\r\n                for (var particle = this._poolFirst; particle; particle = particle.next) {\r\n                    particle.destroy();\r\n                }\r\n                this._poolFirst = null;\r\n                //re-initialize the emitter so that the new constructor can do anything it needs to\r\n                if (this._origConfig && this._origArt)\r\n                    this.init(this._origArt, this._origConfig);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Emitter.prototype, \"parent\", {\r\n        /**\r\n        * The container to add particles to. Settings this will dump any active particles.\r\n        * @member {PIXI.Container} PIXI.particles.Emitter#parent\r\n        */\r\n        get: function () { return this._parent; },\r\n        set: function (value) {\r\n            this.cleanup();\r\n            this._parent = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets up the emitter based on the config settings.\r\n     * @method PIXI.particles.Emitter#init\r\n     * @param {Array|PIXI.Texture} art A texture or array of textures to use for the particles.\r\n     * @param {Object} config A configuration object containing settings for the emitter.\r\n     */\r\n    Emitter.prototype.init = function (art, config) {\r\n        if (!art || !config)\r\n            return;\r\n        //clean up any existing particles\r\n        this.cleanup();\r\n        //store the original config and particle images, in case we need to re-initialize\r\n        //when the particle constructor is changed\r\n        this._origConfig = config;\r\n        this._origArt = art;\r\n        //set up the array of data, also ensuring that it is an array\r\n        art = Array.isArray(art) ? art.slice() : [art];\r\n        //run the art through the particle class's parsing function\r\n        var partClass = this._particleConstructor;\r\n        this.particleImages = partClass.parseArt ? partClass.parseArt(art) : art;\r\n        ///////////////////////////\r\n        // Particle Properties   //\r\n        ///////////////////////////\r\n        //set up the alpha\r\n        if (config.alpha) {\r\n            this.startAlpha = PropertyNode_1.default.createList(config.alpha);\r\n        }\r\n        else\r\n            this.startAlpha = new PropertyNode_1.default(1, 0);\r\n        //set up the speed\r\n        if (config.speed) {\r\n            this.startSpeed = PropertyNode_1.default.createList(config.speed);\r\n            this.minimumSpeedMultiplier = config.speed.minimumSpeedMultiplier || 1;\r\n        }\r\n        else {\r\n            this.minimumSpeedMultiplier = 1;\r\n            this.startSpeed = new PropertyNode_1.default(0, 0);\r\n        }\r\n        //set up acceleration\r\n        var acceleration = config.acceleration;\r\n        if (acceleration && (acceleration.x || acceleration.y)) {\r\n            //make sure we disable speed interpolation\r\n            this.startSpeed.next = null;\r\n            this.acceleration = new PIXI.Point(acceleration.x, acceleration.y);\r\n            this.maxSpeed = config.maxSpeed || NaN;\r\n        }\r\n        else\r\n            this.acceleration = new PIXI.Point();\r\n        //set up the scale\r\n        if (config.scale) {\r\n            this.startScale = PropertyNode_1.default.createList(config.scale);\r\n            this.minimumScaleMultiplier = config.scale.minimumScaleMultiplier || 1;\r\n        }\r\n        else {\r\n            this.startScale = new PropertyNode_1.default(1, 0);\r\n            this.minimumScaleMultiplier = 1;\r\n        }\r\n        //set up the color\r\n        if (config.color) {\r\n            this.startColor = PropertyNode_1.default.createList(config.color);\r\n        }\r\n        else {\r\n            this.startColor = new PropertyNode_1.default({ r: 0xFF, g: 0xFF, b: 0xFF }, 0);\r\n        }\r\n        //set up the start rotation\r\n        if (config.startRotation) {\r\n            this.minStartRotation = config.startRotation.min;\r\n            this.maxStartRotation = config.startRotation.max;\r\n        }\r\n        else\r\n            this.minStartRotation = this.maxStartRotation = 0;\r\n        if (config.noRotation &&\r\n            (this.minStartRotation || this.maxStartRotation)) {\r\n            this.noRotation = !!config.noRotation;\r\n        }\r\n        else\r\n            this.noRotation = false;\r\n        //set up the rotation speed\r\n        if (config.rotationSpeed) {\r\n            this.minRotationSpeed = config.rotationSpeed.min;\r\n            this.maxRotationSpeed = config.rotationSpeed.max;\r\n        }\r\n        else\r\n            this.minRotationSpeed = this.maxRotationSpeed = 0;\r\n        //set up the lifetime\r\n        this.minLifetime = config.lifetime.min;\r\n        this.maxLifetime = config.lifetime.max;\r\n        //get the blend mode\r\n        this.particleBlendMode = ParticleUtils_1.default.getBlendMode(config.blendMode);\r\n        //use the custom ease if provided\r\n        if (config.ease) {\r\n            this.customEase = typeof config.ease == \"function\" ?\r\n                config.ease :\r\n                ParticleUtils_1.default.generateEase(config.ease);\r\n        }\r\n        else\r\n            this.customEase = null;\r\n        //set up the extra data, running it through the particle class's parseData function.\r\n        if (partClass.parseData)\r\n            this.extraData = partClass.parseData(config.extraData);\r\n        else\r\n            this.extraData = config.extraData || null;\r\n        //////////////////////////\r\n        // Emitter Properties   //\r\n        //////////////////////////\r\n        //reset spawn type specific settings\r\n        this.spawnRect = this.spawnCircle = null;\r\n        this.particlesPerWave = 1;\r\n        if (config.particlesPerWave && config.particlesPerWave > 1)\r\n            this.particlesPerWave = config.particlesPerWave;\r\n        this.particleSpacing = 0;\r\n        this.angleStart = 0;\r\n        var spawnCircle;\r\n        //determine the spawn function to use\r\n        switch (config.spawnType) {\r\n            case \"rect\":\r\n                this.spawnType = \"rect\";\r\n                this._spawnFunc = this._spawnRect;\r\n                var spawnRect = config.spawnRect;\r\n                this.spawnRect = new PIXI.Rectangle(spawnRect.x, spawnRect.y, spawnRect.w, spawnRect.h);\r\n                break;\r\n            case \"circle\":\r\n                this.spawnType = \"circle\";\r\n                this._spawnFunc = this._spawnCircle;\r\n                spawnCircle = config.spawnCircle;\r\n                this.spawnCircle = new PIXI.Circle(spawnCircle.x, spawnCircle.y, spawnCircle.r);\r\n                break;\r\n            case \"ring\":\r\n                this.spawnType = \"ring\";\r\n                this._spawnFunc = this._spawnRing;\r\n                spawnCircle = config.spawnCircle;\r\n                this.spawnCircle = new PIXI.Circle(spawnCircle.x, spawnCircle.y, spawnCircle.r);\r\n                this.spawnCircle.minRadius = spawnCircle.minR;\r\n                break;\r\n            case \"burst\":\r\n                this.spawnType = \"burst\";\r\n                this._spawnFunc = this._spawnBurst;\r\n                this.particleSpacing = config.particleSpacing;\r\n                this.angleStart = config.angleStart ? config.angleStart : 0;\r\n                break;\r\n            case \"point\":\r\n                this.spawnType = \"point\";\r\n                this._spawnFunc = this._spawnPoint;\r\n                break;\r\n            case \"polygonalChain\":\r\n                this.spawnType = \"polygonalChain\";\r\n                this._spawnFunc = this._spawnPolygonalChain;\r\n                this.spawnPolygonalChain = new PolygonalChain_1.default(config.spawnPolygon);\r\n                break;\r\n            default:\r\n                this.spawnType = \"point\";\r\n                this._spawnFunc = this._spawnPoint;\r\n                break;\r\n        }\r\n        //set the spawning frequency\r\n        this.frequency = config.frequency;\r\n        this.spawnChance = (typeof config.spawnChance === 'number' && config.spawnChance > 0) ? config.spawnChance : 1;\r\n        //set the emitter lifetime\r\n        this.emitterLifetime = config.emitterLifetime || -1;\r\n        //set the max particles\r\n        this.maxParticles = config.maxParticles > 0 ? config.maxParticles : 1000;\r\n        //determine if we should add the particle at the back of the list or not\r\n        this.addAtBack = !!config.addAtBack;\r\n        //reset the emitter position and rotation variables\r\n        this.rotation = 0;\r\n        this.ownerPos = new PIXI.Point();\r\n        this.spawnPos = new PIXI.Point(config.pos.x, config.pos.y);\r\n        this._prevEmitterPos = this.spawnPos.clone();\r\n        //previous emitter position is invalid and should not be used for interpolation\r\n        this._prevPosIsValid = false;\r\n        //start emitting\r\n        this._spawnTimer = 0;\r\n        this.emit = config.emit === undefined ? true : !!config.emit;\r\n        this.autoUpdate = config.autoUpdate === undefined ? false : !!config.autoUpdate;\r\n    };\r\n    /**\r\n     * Recycles an individual particle.\r\n     * @method PIXI.particles.Emitter#recycle\r\n     * @param {Particle} particle The particle to recycle.\r\n     * @private\r\n     */\r\n    Emitter.prototype.recycle = function (particle) {\r\n        if (particle.next)\r\n            particle.next.prev = particle.prev;\r\n        if (particle.prev)\r\n            particle.prev.next = particle.next;\r\n        if (particle == this._activeParticlesLast)\r\n            this._activeParticlesLast = particle.prev;\r\n        if (particle == this._activeParticlesFirst)\r\n            this._activeParticlesFirst = particle.next;\r\n        //add to pool\r\n        particle.prev = null;\r\n        particle.next = this._poolFirst;\r\n        this._poolFirst = particle;\r\n        //remove child from display, or make it invisible if it is in a ParticleContainer\r\n        if (particle.parent)\r\n            particle.parent.removeChild(particle);\r\n        //decrease count\r\n        --this.particleCount;\r\n    };\r\n    /**\r\n     * Sets the rotation of the emitter to a new value.\r\n     * @method PIXI.particles.Emitter#rotate\r\n     * @param {Number} newRot The new rotation, in degrees.\r\n     */\r\n    Emitter.prototype.rotate = function (newRot) {\r\n        if (this.rotation == newRot)\r\n            return;\r\n        //caclulate the difference in rotation for rotating spawnPos\r\n        var diff = newRot - this.rotation;\r\n        this.rotation = newRot;\r\n        //rotate spawnPos\r\n        ParticleUtils_1.default.rotatePoint(diff, this.spawnPos);\r\n        //mark the position as having changed\r\n        this._posChanged = true;\r\n    };\r\n    /**\r\n     * Changes the spawn position of the emitter.\r\n     * @method PIXI.particles.Emitter#updateSpawnPos\r\n     * @param {Number} x The new x value of the spawn position for the emitter.\r\n     * @param {Number} y The new y value of the spawn position for the emitter.\r\n     */\r\n    Emitter.prototype.updateSpawnPos = function (x, y) {\r\n        this._posChanged = true;\r\n        this.spawnPos.x = x;\r\n        this.spawnPos.y = y;\r\n    };\r\n    /**\r\n     * Changes the position of the emitter's owner. You should call this if you are adding\r\n     * particles to the world container that your emitter's owner is moving around in.\r\n     * @method PIXI.particles.Emitter#updateOwnerPos\r\n     * @param {Number} x The new x value of the emitter's owner.\r\n     * @param {Number} y The new y value of the emitter's owner.\r\n     */\r\n    Emitter.prototype.updateOwnerPos = function (x, y) {\r\n        this._posChanged = true;\r\n        this.ownerPos.x = x;\r\n        this.ownerPos.y = y;\r\n    };\r\n    /**\r\n     * Prevents emitter position interpolation in the next update.\r\n     * This should be used if you made a major position change of your emitter's owner\r\n     * that was not normal movement.\r\n     * @method PIXI.particles.Emitter#resetPositionTracking\r\n     */\r\n    Emitter.prototype.resetPositionTracking = function () {\r\n        this._prevPosIsValid = false;\r\n    };\r\n    Object.defineProperty(Emitter.prototype, \"emit\", {\r\n        /**\r\n         * If particles should be emitted during update() calls. Setting this to false\r\n         * stops new particles from being created, but allows existing ones to die out.\r\n         * @member {Boolean} PIXI.particles.Emitter#emit\r\n         */\r\n        get: function () { return this._emit; },\r\n        set: function (value) {\r\n            this._emit = !!value;\r\n            this._emitterLife = this.emitterLifetime;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ;\r\n    Object.defineProperty(Emitter.prototype, \"autoUpdate\", {\r\n        /**\r\n         * If the update function is called automatically from the shared ticker.\r\n         * Setting this to false requires calling the update function manually.\r\n         * @member {Boolean} PIXI.particles.Emitter#autoUpdate\r\n         */\r\n        get: function () { return this._autoUpdate; },\r\n        set: function (value) {\r\n            if (this._autoUpdate && !value) {\r\n                ticker.remove(this.update, this);\r\n            }\r\n            else if (!this._autoUpdate && value) {\r\n                ticker.add(this.update, this);\r\n            }\r\n            this._autoUpdate = !!value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Starts emitting particles, sets autoUpdate to true, and sets up the Emitter to destroy itself\r\n     * when particle emission is complete.\r\n     * @method PIXI.particles.Emitter#playOnceAndDestroy\r\n     * @param {Function} [callback] Callback for when emission is complete (all particles have died off)\r\n     */\r\n    Emitter.prototype.playOnceAndDestroy = function (callback) {\r\n        this.autoUpdate = true;\r\n        this.emit = true;\r\n        this._destroyWhenComplete = true;\r\n        this._completeCallback = callback;\r\n    };\r\n    /**\r\n     * Starts emitting particles and optionally calls a callback when particle emission is complete.\r\n     * @method PIXI.particles.Emitter#playOnce\r\n     * @param {Function} [callback] Callback for when emission is complete (all particles have died off)\r\n     */\r\n    Emitter.prototype.playOnce = function (callback) {\r\n        this.emit = true;\r\n        this._completeCallback = callback;\r\n    };\r\n    /**\r\n     * Updates all particles spawned by this emitter and emits new ones.\r\n     * @method PIXI.particles.Emitter#update\r\n     * @param {Number} delta Time elapsed since the previous frame, in __seconds__.\r\n     */\r\n    Emitter.prototype.update = function (delta) {\r\n        if (this._autoUpdate) {\r\n            delta = delta / PIXI.settings.TARGET_FPMS / 1000;\r\n        }\r\n        //if we don't have a parent to add particles to, then don't do anything.\r\n        //this also works as a isDestroyed check\r\n        if (!this._parent)\r\n            return;\r\n        //update existing particles\r\n        var i, particle, next;\r\n        for (particle = this._activeParticlesFirst; particle; particle = next) {\r\n            next = particle.next;\r\n            particle.update(delta);\r\n        }\r\n        var prevX, prevY;\r\n        //if the previous position is valid, store these for later interpolation\r\n        if (this._prevPosIsValid) {\r\n            prevX = this._prevEmitterPos.x;\r\n            prevY = this._prevEmitterPos.y;\r\n        }\r\n        //store current position of the emitter as local variables\r\n        var curX = this.ownerPos.x + this.spawnPos.x;\r\n        var curY = this.ownerPos.y + this.spawnPos.y;\r\n        //spawn new particles\r\n        if (this._emit) {\r\n            //decrease spawn timer\r\n            this._spawnTimer -= delta < 0 ? 0 : delta;\r\n            //while _spawnTimer < 0, we have particles to spawn\r\n            while (this._spawnTimer <= 0) {\r\n                //determine if the emitter should stop spawning\r\n                if (this._emitterLife > 0) {\r\n                    this._emitterLife -= this._frequency;\r\n                    if (this._emitterLife <= 0) {\r\n                        this._spawnTimer = 0;\r\n                        this._emitterLife = 0;\r\n                        this.emit = false;\r\n                        break;\r\n                    }\r\n                }\r\n                //determine if we have hit the particle limit\r\n                if (this.particleCount >= this.maxParticles) {\r\n                    this._spawnTimer += this._frequency;\r\n                    continue;\r\n                }\r\n                //determine the particle lifetime\r\n                var lifetime = void 0;\r\n                if (this.minLifetime == this.maxLifetime)\r\n                    lifetime = this.minLifetime;\r\n                else\r\n                    lifetime = Math.random() * (this.maxLifetime - this.minLifetime) + this.minLifetime;\r\n                //only make the particle if it wouldn't immediately destroy itself\r\n                if (-this._spawnTimer < lifetime) {\r\n                    //If the position has changed and this isn't the first spawn,\r\n                    //interpolate the spawn position\r\n                    var emitPosX = void 0, emitPosY = void 0;\r\n                    if (this._prevPosIsValid && this._posChanged) {\r\n                        //1 - _spawnTimer / delta, but _spawnTimer is negative\r\n                        var lerp = 1 + this._spawnTimer / delta;\r\n                        emitPosX = (curX - prevX) * lerp + prevX;\r\n                        emitPosY = (curY - prevY) * lerp + prevY;\r\n                    }\r\n                    else {\r\n                        emitPosX = curX;\r\n                        emitPosY = curY;\r\n                    }\r\n                    //create enough particles to fill the wave (non-burst types have a wave of 1)\r\n                    i = 0;\r\n                    for (var len = Math.min(this.particlesPerWave, this.maxParticles - this.particleCount); i < len; ++i) {\r\n                        //see if we actually spawn one\r\n                        if (this.spawnChance < 1 && Math.random() >= this.spawnChance)\r\n                            continue;\r\n                        //create particle\r\n                        var p = void 0;\r\n                        if (this._poolFirst) {\r\n                            p = this._poolFirst;\r\n                            this._poolFirst = this._poolFirst.next;\r\n                            p.next = null;\r\n                        }\r\n                        else {\r\n                            p = new this.particleConstructor(this);\r\n                        }\r\n                        //set a random texture if we have more than one\r\n                        if (this.particleImages.length > 1) {\r\n                            p.applyArt(this.particleImages[Math.floor(Math.random() * this.particleImages.length)]);\r\n                        }\r\n                        else {\r\n                            //if they are actually the same texture, a standard particle\r\n                            //will quit early from the texture setting in setTexture().\r\n                            p.applyArt(this.particleImages[0]);\r\n                        }\r\n                        //set up the start and end values\r\n                        p.alphaList.reset(this.startAlpha);\r\n                        if (this.minimumSpeedMultiplier != 1) {\r\n                            p.speedMultiplier = Math.random() * (1 - this.minimumSpeedMultiplier) + this.minimumSpeedMultiplier;\r\n                        }\r\n                        p.speedList.reset(this.startSpeed);\r\n                        p.acceleration.x = this.acceleration.x;\r\n                        p.acceleration.y = this.acceleration.y;\r\n                        p.maxSpeed = this.maxSpeed;\r\n                        if (this.minimumScaleMultiplier != 1) {\r\n                            p.scaleMultiplier = Math.random() * (1 - this.minimumScaleMultiplier) + this.minimumScaleMultiplier;\r\n                        }\r\n                        p.scaleList.reset(this.startScale);\r\n                        p.colorList.reset(this.startColor);\r\n                        //randomize the rotation speed\r\n                        if (this.minRotationSpeed == this.maxRotationSpeed)\r\n                            p.rotationSpeed = this.minRotationSpeed;\r\n                        else\r\n                            p.rotationSpeed = Math.random() * (this.maxRotationSpeed - this.minRotationSpeed) + this.minRotationSpeed;\r\n                        p.noRotation = this.noRotation;\r\n                        //set up the lifetime\r\n                        p.maxLife = lifetime;\r\n                        //set the blend mode\r\n                        p.blendMode = this.particleBlendMode;\r\n                        //set the custom ease, if any\r\n                        p.ease = this.customEase;\r\n                        //set the extra data, if any\r\n                        p.extraData = this.extraData;\r\n                        //call the proper function to handle rotation and position of particle\r\n                        this._spawnFunc(p, emitPosX, emitPosY, i);\r\n                        //initialize particle\r\n                        p.init();\r\n                        //update the particle by the time passed, so the particles are spread out properly\r\n                        p.update(-this._spawnTimer); //we want a positive delta, because a negative delta messes things up\r\n                        //add the particle to the display list\r\n                        if (!p.parent) {\r\n                            if (this.addAtBack)\r\n                                this._parent.addChildAt(p, 0);\r\n                            else\r\n                                this._parent.addChild(p);\r\n                        }\r\n                        else {\r\n                            //kind of hacky, but performance friendly\r\n                            //shuffle children to correct place\r\n                            var children = this._parent.children;\r\n                            //avoid using splice if possible\r\n                            if (children[0] == p)\r\n                                children.shift();\r\n                            else if (children[children.length - 1] == p)\r\n                                children.pop();\r\n                            else {\r\n                                var index = children.indexOf(p);\r\n                                children.splice(index, 1);\r\n                            }\r\n                            if (this.addAtBack)\r\n                                children.unshift(p);\r\n                            else\r\n                                children.push(p);\r\n                        }\r\n                        //add particle to list of active particles\r\n                        if (this._activeParticlesLast) {\r\n                            this._activeParticlesLast.next = p;\r\n                            p.prev = this._activeParticlesLast;\r\n                            this._activeParticlesLast = p;\r\n                        }\r\n                        else {\r\n                            this._activeParticlesLast = this._activeParticlesFirst = p;\r\n                        }\r\n                        ++this.particleCount;\r\n                    }\r\n                }\r\n                //increase timer and continue on to any other particles that need to be created\r\n                this._spawnTimer += this._frequency;\r\n            }\r\n        }\r\n        //if the position changed before this update, then keep track of that\r\n        if (this._posChanged) {\r\n            this._prevEmitterPos.x = curX;\r\n            this._prevEmitterPos.y = curY;\r\n            this._prevPosIsValid = true;\r\n            this._posChanged = false;\r\n        }\r\n        //if we are all done and should destroy ourselves, take care of that\r\n        if (!this._emit && !this._activeParticlesFirst) {\r\n            if (this._completeCallback) {\r\n                this._completeCallback();\r\n            }\r\n            if (this._destroyWhenComplete) {\r\n                this.destroy();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Positions a particle for a point type emitter.\r\n     * @method PIXI.particles.Emitter#_spawnPoint\r\n     * @private\r\n     * @param {Particle} p The particle to position and rotate.\r\n     * @param {Number} emitPosX The emitter's x position\r\n     * @param {Number} emitPosY The emitter's y position\r\n     * @param {int} i The particle number in the current wave. Not used for this function.\r\n     */\r\n    Emitter.prototype._spawnPoint = function (p, emitPosX, emitPosY) {\r\n        //set the initial rotation/direction of the particle based on\r\n        //starting particle angle and rotation of emitter\r\n        if (this.minStartRotation == this.maxStartRotation)\r\n            p.rotation = this.minStartRotation + this.rotation;\r\n        else\r\n            p.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) + this.minStartRotation + this.rotation;\r\n        //drop the particle at the emitter's position\r\n        p.position.x = emitPosX;\r\n        p.position.y = emitPosY;\r\n    };\r\n    /**\r\n     * Positions a particle for a rectangle type emitter.\r\n     * @method PIXI.particles.Emitter#_spawnRect\r\n     * @private\r\n     * @param {Particle} p The particle to position and rotate.\r\n     * @param {Number} emitPosX The emitter's x position\r\n     * @param {Number} emitPosY The emitter's y position\r\n     * @param {int} i The particle number in the current wave. Not used for this function.\r\n     */\r\n    Emitter.prototype._spawnRect = function (p, emitPosX, emitPosY) {\r\n        //set the initial rotation/direction of the particle based on starting\r\n        //particle angle and rotation of emitter\r\n        if (this.minStartRotation == this.maxStartRotation)\r\n            p.rotation = this.minStartRotation + this.rotation;\r\n        else\r\n            p.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) + this.minStartRotation + this.rotation;\r\n        //place the particle at a random point in the rectangle\r\n        helperPoint.x = Math.random() * this.spawnRect.width + this.spawnRect.x;\r\n        helperPoint.y = Math.random() * this.spawnRect.height + this.spawnRect.y;\r\n        if (this.rotation !== 0)\r\n            ParticleUtils_1.default.rotatePoint(this.rotation, helperPoint);\r\n        p.position.x = emitPosX + helperPoint.x;\r\n        p.position.y = emitPosY + helperPoint.y;\r\n    };\r\n    /**\r\n     * Positions a particle for a circle type emitter.\r\n     * @method PIXI.particles.Emitter#_spawnCircle\r\n     * @private\r\n     * @param {Particle} p The particle to position and rotate.\r\n     * @param {Number} emitPosX The emitter's x position\r\n     * @param {Number} emitPosY The emitter's y position\r\n     * @param {int} i The particle number in the current wave. Not used for this function.\r\n     */\r\n    Emitter.prototype._spawnCircle = function (p, emitPosX, emitPosY) {\r\n        //set the initial rotation/direction of the particle based on starting\r\n        //particle angle and rotation of emitter\r\n        if (this.minStartRotation == this.maxStartRotation)\r\n            p.rotation = this.minStartRotation + this.rotation;\r\n        else\r\n            p.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) +\r\n                this.minStartRotation + this.rotation;\r\n        //place the particle at a random radius in the circle\r\n        helperPoint.x = Math.random() * this.spawnCircle.radius;\r\n        helperPoint.y = 0;\r\n        //rotate the point to a random angle in the circle\r\n        ParticleUtils_1.default.rotatePoint(Math.random() * 360, helperPoint);\r\n        //offset by the circle's center\r\n        helperPoint.x += this.spawnCircle.x;\r\n        helperPoint.y += this.spawnCircle.y;\r\n        //rotate the point by the emitter's rotation\r\n        if (this.rotation !== 0)\r\n            ParticleUtils_1.default.rotatePoint(this.rotation, helperPoint);\r\n        //set the position, offset by the emitter's position\r\n        p.position.x = emitPosX + helperPoint.x;\r\n        p.position.y = emitPosY + helperPoint.y;\r\n    };\r\n    /**\r\n     * Positions a particle for a ring type emitter.\r\n     * @method PIXI.particles.Emitter#_spawnRing\r\n     * @private\r\n     * @param {Particle} p The particle to position and rotate.\r\n     * @param {Number} emitPosX The emitter's x position\r\n     * @param {Number} emitPosY The emitter's y position\r\n     * @param {int} i The particle number in the current wave. Not used for this function.\r\n     */\r\n    Emitter.prototype._spawnRing = function (p, emitPosX, emitPosY) {\r\n        var spawnCircle = this.spawnCircle;\r\n        //set the initial rotation/direction of the particle based on starting\r\n        //particle angle and rotation of emitter\r\n        if (this.minStartRotation == this.maxStartRotation)\r\n            p.rotation = this.minStartRotation + this.rotation;\r\n        else\r\n            p.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) +\r\n                this.minStartRotation + this.rotation;\r\n        //place the particle at a random radius in the ring\r\n        if (spawnCircle.minRadius !== spawnCircle.radius) {\r\n            helperPoint.x = Math.random() * (spawnCircle.radius - spawnCircle.minRadius) +\r\n                spawnCircle.minRadius;\r\n        }\r\n        else\r\n            helperPoint.x = spawnCircle.radius;\r\n        helperPoint.y = 0;\r\n        //rotate the point to a random angle in the circle\r\n        var angle = Math.random() * 360;\r\n        p.rotation += angle;\r\n        ParticleUtils_1.default.rotatePoint(angle, helperPoint);\r\n        //offset by the circle's center\r\n        helperPoint.x += this.spawnCircle.x;\r\n        helperPoint.y += this.spawnCircle.y;\r\n        //rotate the point by the emitter's rotation\r\n        if (this.rotation !== 0)\r\n            ParticleUtils_1.default.rotatePoint(this.rotation, helperPoint);\r\n        //set the position, offset by the emitter's position\r\n        p.position.x = emitPosX + helperPoint.x;\r\n        p.position.y = emitPosY + helperPoint.y;\r\n    };\r\n    /**\r\n     * Positions a particle for polygonal chain.\r\n     * @method PIXI.particles.Emitter#_spawnPolygonalChain\r\n     * @private\r\n     * @param {Particle} p The particle to position and rotate.\r\n     * @param {Number} emitPosX The emitter's x position\r\n     * @param {Number} emitPosY The emitter's y position\r\n     * @param {int} i The particle number in the current wave. Not used for this function.\r\n     */\r\n    Emitter.prototype._spawnPolygonalChain = function (p, emitPosX, emitPosY) {\r\n        //set the initial rotation/direction of the particle based on starting\r\n        //particle angle and rotation of emitter\r\n        if (this.minStartRotation == this.maxStartRotation)\r\n            p.rotation = this.minStartRotation + this.rotation;\r\n        else\r\n            p.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) +\r\n                this.minStartRotation + this.rotation;\r\n        // get random point on the polygon chain\r\n        this.spawnPolygonalChain.getRandomPoint(helperPoint);\r\n        //rotate the point by the emitter's rotation\r\n        if (this.rotation !== 0)\r\n            ParticleUtils_1.default.rotatePoint(this.rotation, helperPoint);\r\n        //set the position, offset by the emitter's position\r\n        p.position.x = emitPosX + helperPoint.x;\r\n        p.position.y = emitPosY + helperPoint.y;\r\n    };\r\n    /**\r\n     * Positions a particle for a burst type emitter.\r\n     * @method PIXI.particles.Emitter#_spawnBurst\r\n     * @private\r\n     * @param {Particle} p The particle to position and rotate.\r\n     * @param {Number} emitPosX The emitter's x position\r\n     * @param {Number} emitPosY The emitter's y position\r\n     * @param {int} i The particle number in the current wave.\r\n     */\r\n    Emitter.prototype._spawnBurst = function (p, emitPosX, emitPosY, i) {\r\n        //set the initial rotation/direction of the particle based on spawn\r\n        //angle and rotation of emitter\r\n        if (this.particleSpacing === 0)\r\n            p.rotation = Math.random() * 360;\r\n        else\r\n            p.rotation = this.angleStart + (this.particleSpacing * i) + this.rotation;\r\n        //drop the particle at the emitter's position\r\n        p.position.x = emitPosX;\r\n        p.position.y = emitPosY;\r\n    };\r\n    /**\r\n     * Kills all active particles immediately.\r\n     * @method PIXI.particles.Emitter#cleanup\r\n     */\r\n    Emitter.prototype.cleanup = function () {\r\n        var particle, next;\r\n        for (particle = this._activeParticlesFirst; particle; particle = next) {\r\n            next = particle.next;\r\n            this.recycle(particle);\r\n            if (particle.parent)\r\n                particle.parent.removeChild(particle);\r\n        }\r\n        this._activeParticlesFirst = this._activeParticlesLast = null;\r\n        this.particleCount = 0;\r\n    };\r\n    /**\r\n     * Destroys the emitter and all of its particles.\r\n     * @method PIXI.particles.Emitter#destroy\r\n     */\r\n    Emitter.prototype.destroy = function () {\r\n        //make sure we aren't still listening to any tickers\r\n        this.autoUpdate = false;\r\n        //puts all active particles in the pool, and removes them from the particle parent\r\n        this.cleanup();\r\n        //wipe the pool clean\r\n        var next;\r\n        for (var particle = this._poolFirst; particle; particle = next) {\r\n            //store next value so we don't lose it in our destroy call\r\n            next = particle.next;\r\n            particle.destroy();\r\n        }\r\n        this._poolFirst = this._parent = this.particleImages = this.spawnPos = this.ownerPos =\r\n            this.startColor = this.startScale = this.startAlpha = this.startSpeed =\r\n                this.customEase = this._completeCallback = null;\r\n    };\r\n    return Emitter;\r\n}());\r\nexports.default = Emitter;\r\n\r\n},{\"./Particle\":3,\"./ParticleUtils\":4,\"./PolygonalChain\":6,\"./PropertyNode\":8}],3:[function(_dereq_,module,exports){\r\n\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ParticleUtils_1 = _dereq_(\"./ParticleUtils\");\r\nvar PropertyList_1 = _dereq_(\"./PropertyList\");\r\nvar Sprite = PIXI.Sprite;\r\n/**\r\n * An individual particle image. You shouldn't have to deal with these.\r\n * @memberof PIXI.particles\r\n * @class Particle\r\n * @extends PIXI.Sprite\r\n * @constructor\r\n * @param {PIXI.particles.Emitter} emitter The emitter that controls this particle.\r\n */\r\nvar Particle = /** @class */ (function (_super) {\r\n    __extends(Particle, _super);\r\n    function Particle(emitter) {\r\n        var _this = \r\n        //start off the sprite with a blank texture, since we are going to replace it\r\n        //later when the particle is initialized.\r\n        _super.call(this) || this;\r\n        _this.emitter = emitter;\r\n        //particles should be centered\r\n        _this.anchor.x = _this.anchor.y = 0.5;\r\n        _this.velocity = new PIXI.Point();\r\n        _this.maxLife = 0;\r\n        _this.age = 0;\r\n        _this.ease = null;\r\n        _this.extraData = null;\r\n        _this.alphaList = new PropertyList_1.default();\r\n        _this.speedList = new PropertyList_1.default();\r\n        _this.speedMultiplier = 1;\r\n        /**\r\n         * Acceleration to apply to the particle.\r\n         * @property {PIXI.Point} accleration\r\n         */\r\n        _this.acceleration = new PIXI.Point();\r\n        /**\r\n         * The maximum speed allowed for accelerating particles. Negative values, values of 0 or NaN\r\n         * will disable the maximum speed.\r\n         * @property {Number} maxSpeed\r\n         * @default NaN\r\n         */\r\n        _this.maxSpeed = NaN;\r\n        /**\r\n         * The scale of the particle throughout its life.\r\n         * @property {PIXI.particles.PropertyList} scaleList\r\n         */\r\n        _this.scaleList = new PropertyList_1.default();\r\n        /**\r\n         * A multiplier from 0-1 applied to the scale of the particle at all times.\r\n         * @property {number} scaleMultiplier\r\n         */\r\n        _this.scaleMultiplier = 1;\r\n        /**\r\n         * The tint of the particle throughout its life.\r\n         * @property {PIXI.particles.PropertyList} colorList\r\n         */\r\n        _this.colorList = new PropertyList_1.default(true);\r\n        /**\r\n         * If alpha should be interpolated at all.\r\n         * @property {Boolean} _doAlpha\r\n         * @private\r\n         */\r\n        _this._doAlpha = false;\r\n        /**\r\n         * If scale should be interpolated at all.\r\n         * @property {Boolean} _doScale\r\n         * @private\r\n         */\r\n        _this._doScale = false;\r\n        /**\r\n         * If speed should be interpolated at all.\r\n         * @property {Boolean} _doSpeed\r\n         * @private\r\n         */\r\n        _this._doSpeed = false;\r\n        /**\r\n         * If acceleration should be handled at all. _doSpeed is mutually exclusive with this,\r\n         * and _doSpeed gets priority.\r\n         * @property {Boolean} _doAcceleration\r\n         * @private\r\n         */\r\n        _this._doAcceleration = false;\r\n        /**\r\n         * If color should be interpolated at all.\r\n         * @property {Boolean} _doColor\r\n         * @private\r\n         */\r\n        _this._doColor = false;\r\n        /**\r\n         * If normal movement should be handled. Subclasses wishing to override movement\r\n         * can set this to false in init().\r\n         * @property {Boolean} _doNormalMovement\r\n         * @private\r\n         */\r\n        _this._doNormalMovement = false;\r\n        /**\r\n         * One divided by the max life of the particle, saved for slightly faster math.\r\n         * @property {Number} _oneOverLife\r\n         * @private\r\n         */\r\n        _this._oneOverLife = 0;\r\n        /**\r\n         * Reference to the next particle in the list.\r\n         * @property {Particle} next\r\n         * @private\r\n         */\r\n        _this.next = null;\r\n        /**\r\n         * Reference to the previous particle in the list.\r\n         * @property {Particle} prev\r\n         * @private\r\n         */\r\n        _this.prev = null;\r\n        //save often used functions on the instance instead of the prototype for better speed\r\n        _this.init = _this.init;\r\n        _this.Particle_init = Particle.prototype.init;\r\n        _this.update = _this.update;\r\n        _this.Particle_update = Particle.prototype.update;\r\n        _this.Sprite_destroy = _super.prototype.destroy;\r\n        _this.Particle_destroy = Particle.prototype.destroy;\r\n        _this.applyArt = _this.applyArt;\r\n        _this.kill = _this.kill;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Initializes the particle for use, based on the properties that have to\r\n     * have been set already on the particle.\r\n     * @method PIXI.particles.Particle#init\r\n     */\r\n    Particle.prototype.init = function () {\r\n        //reset the age\r\n        this.age = 0;\r\n        //set up the velocity based on the start speed and rotation\r\n        this.velocity.x = this.speedList.current.value * this.speedMultiplier;\r\n        this.velocity.y = 0;\r\n        ParticleUtils_1.default.rotatePoint(this.rotation, this.velocity);\r\n        if (this.noRotation) {\r\n            this.rotation = 0;\r\n        }\r\n        else {\r\n            //convert rotation to Radians from Degrees\r\n            this.rotation *= ParticleUtils_1.default.DEG_TO_RADS;\r\n        }\r\n        //convert rotation speed to Radians from Degrees\r\n        this.rotationSpeed *= ParticleUtils_1.default.DEG_TO_RADS;\r\n        //set alpha to inital alpha\r\n        this.alpha = this.alphaList.current.value;\r\n        //set scale to initial scale\r\n        this.scale.x = this.scale.y = this.scaleList.current.value;\r\n        //figure out what we need to interpolate\r\n        this._doAlpha = !!this.alphaList.current.next;\r\n        this._doSpeed = !!this.speedList.current.next;\r\n        this._doScale = !!this.scaleList.current.next;\r\n        this._doColor = !!this.colorList.current.next;\r\n        this._doAcceleration = this.acceleration.x !== 0 || this.acceleration.y !== 0;\r\n        //_doNormalMovement can be cancelled by subclasses\r\n        this._doNormalMovement = this._doSpeed || this.speedList.current.value !== 0 || this._doAcceleration;\r\n        //save our lerp helper\r\n        this._oneOverLife = 1 / this.maxLife;\r\n        //set the inital color\r\n        var color = this.colorList.current.value;\r\n        this.tint = ParticleUtils_1.default.combineRGBComponents(color.r, color.g, color.b);\r\n        //ensure visibility\r\n        this.visible = true;\r\n    };\r\n    /**\r\n     * Sets the texture for the particle. This can be overridden to allow\r\n     * for an animated particle.\r\n     * @method PIXI.particles.Particle#applyArt\r\n     * @param {PIXI.Texture} art The texture to set.\r\n     */\r\n    Particle.prototype.applyArt = function (art) {\r\n        this.texture = art || PIXI.Texture.EMPTY;\r\n    };\r\n    /**\r\n     * Updates the particle.\r\n     * @method PIXI.particles.Particle#update\r\n     * @param {Number} delta Time elapsed since the previous frame, in __seconds__.\r\n     * @return {Number} The standard interpolation multiplier (0-1) used for all relevant particle\r\n     *                   properties. A value of -1 means the particle died of old age instead.\r\n     */\r\n    Particle.prototype.update = function (delta) {\r\n        //increase age\r\n        this.age += delta;\r\n        //recycle particle if it is too old\r\n        if (this.age >= this.maxLife || this.age < 0) {\r\n            this.kill();\r\n            return -1;\r\n        }\r\n        //determine our interpolation value\r\n        var lerp = this.age * this._oneOverLife; //lifetime / maxLife;\r\n        if (this.ease) {\r\n            if (this.ease.length == 4) {\r\n                //the t, b, c, d parameters that some tween libraries use\r\n                //(time, initial value, end value, duration)\r\n                lerp = this.ease(lerp, 0, 1, 1);\r\n            }\r\n            else {\r\n                //the simplified version that we like that takes\r\n                //one parameter, time from 0-1. TweenJS eases provide this usage.\r\n                lerp = this.ease(lerp);\r\n            }\r\n        }\r\n        //interpolate alpha\r\n        if (this._doAlpha)\r\n            this.alpha = this.alphaList.interpolate(lerp);\r\n        //interpolate scale\r\n        if (this._doScale) {\r\n            var scale = this.scaleList.interpolate(lerp) * this.scaleMultiplier;\r\n            this.scale.x = this.scale.y = scale;\r\n        }\r\n        //handle movement\r\n        if (this._doNormalMovement) {\r\n            //interpolate speed\r\n            if (this._doSpeed) {\r\n                var speed = this.speedList.interpolate(lerp) * this.speedMultiplier;\r\n                ParticleUtils_1.default.normalize(this.velocity);\r\n                ParticleUtils_1.default.scaleBy(this.velocity, speed);\r\n            }\r\n            else if (this._doAcceleration) {\r\n                this.velocity.x += this.acceleration.x * delta;\r\n                this.velocity.y += this.acceleration.y * delta;\r\n                if (this.maxSpeed) {\r\n                    var currentSpeed = ParticleUtils_1.default.length(this.velocity);\r\n                    //if we are going faster than we should, clamp at the max speed\r\n                    //DO NOT recalculate vector length\r\n                    if (currentSpeed > this.maxSpeed) {\r\n                        ParticleUtils_1.default.scaleBy(this.velocity, this.maxSpeed / currentSpeed);\r\n                    }\r\n                }\r\n            }\r\n            //adjust position based on velocity\r\n            this.position.x += this.velocity.x * delta;\r\n            this.position.y += this.velocity.y * delta;\r\n        }\r\n        //interpolate color\r\n        if (this._doColor) {\r\n            this.tint = this.colorList.interpolate(lerp);\r\n        }\r\n        //update rotation\r\n        if (this.rotationSpeed !== 0) {\r\n            this.rotation += this.rotationSpeed * delta;\r\n        }\r\n        else if (this.acceleration && !this.noRotation) {\r\n            this.rotation = Math.atan2(this.velocity.y, this.velocity.x); // + Math.PI / 2;\r\n        }\r\n        return lerp;\r\n    };\r\n    /**\r\n     * Kills the particle, removing it from the display list\r\n     * and telling the emitter to recycle it.\r\n     * @method PIXI.particles.Particle#kill\r\n     */\r\n    Particle.prototype.kill = function () {\r\n        this.emitter.recycle(this);\r\n    };\r\n    /**\r\n     * Destroys the particle, removing references and preventing future use.\r\n     * @method PIXI.particles.Particle#destroy\r\n     */\r\n    Particle.prototype.destroy = function () {\r\n        if (this.parent)\r\n            this.parent.removeChild(this);\r\n        this.Sprite_destroy();\r\n        this.emitter = this.velocity = this.colorList = this.scaleList = this.alphaList =\r\n            this.speedList = this.ease = this.next = this.prev = null;\r\n    };\r\n    /**\r\n     * Checks over the art that was passed to the Emitter's init() function, to do any special\r\n     * modifications to prepare it ahead of time.\r\n     * @method PIXI.particles.Particle.parseArt\r\n     * @static\r\n     * @param  {Array} art The array of art data. For Particle, it should be an array of Textures.\r\n     *                     Any strings in the array will be converted to Textures via\r\n     *                     Texture.fromImage().\r\n     * @return {Array} The art, after any needed modifications.\r\n     */\r\n    Particle.parseArt = function (art) {\r\n        //convert any strings to Textures.\r\n        var i;\r\n        for (i = art.length; i >= 0; --i) {\r\n            if (typeof art[i] == \"string\")\r\n                art[i] = PIXI.Texture.fromImage(art[i]);\r\n        }\r\n        //particles from different base textures will be slower in WebGL than if they\r\n        //were from one spritesheet\r\n        if (ParticleUtils_1.default.verbose) {\r\n            for (i = art.length - 1; i > 0; --i) {\r\n                if (art[i].baseTexture != art[i - 1].baseTexture) {\r\n                    if (window.console)\r\n                        console.warn(\"PixiParticles: using particle textures from different images may hinder performance in WebGL\");\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return art;\r\n    };\r\n    /**\r\n     * Parses extra emitter data to ensure it is set up for this particle class.\r\n     * Particle does nothing to the extra data.\r\n     * @method PIXI.particles.Particle.parseData\r\n     * @static\r\n     * @param  {Object} extraData The extra data from the particle config.\r\n     * @return {Object} The parsed extra data.\r\n     */\r\n    Particle.parseData = function (extraData) {\r\n        return extraData;\r\n    };\r\n    return Particle;\r\n}(Sprite));\r\nexports.default = Particle;\r\n\r\n},{\"./ParticleUtils\":4,\"./PropertyList\":7}],4:[function(_dereq_,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar BLEND_MODES = PIXI.BLEND_MODES;\r\nvar PropertyNode_1 = _dereq_(\"./PropertyNode\");\r\n/**\r\n * Contains helper functions for particles and emitters to use.\r\n * @memberof PIXI.particles\r\n * @class ParticleUtils\r\n * @static\r\n */\r\nvar ParticleUtils = {\r\n    /**\r\n     * If errors and warnings should be logged within the library.\r\n     * @name PIXI.particles.ParticleUtils.verbose\r\n     * @default false\r\n     * @static\r\n     */\r\n    verbose: false,\r\n    DEG_TO_RADS: Math.PI / 180,\r\n    /**\r\n     * Rotates a point by a given angle.\r\n     * @method PIXI.particles.ParticleUtils.rotatePoint\r\n     * @param {Number} angle The angle to rotate by in degrees\r\n     * @param {PIXI.Point} p The point to rotate around 0,0.\r\n     * @static\r\n     */\r\n    rotatePoint: function (angle, p) {\r\n        if (!angle)\r\n            return;\r\n        angle *= ParticleUtils.DEG_TO_RADS;\r\n        var s = Math.sin(angle);\r\n        var c = Math.cos(angle);\r\n        var xnew = p.x * c - p.y * s;\r\n        var ynew = p.x * s + p.y * c;\r\n        p.x = xnew;\r\n        p.y = ynew;\r\n    },\r\n    /**\r\n     * Combines separate color components (0-255) into a single uint color.\r\n     * @method PIXI.particles.ParticleUtils.combineRGBComponents\r\n     * @param {uint} r The red value of the color\r\n     * @param {uint} g The green value of the color\r\n     * @param {uint} b The blue value of the color\r\n     * @return {uint} The color in the form of 0xRRGGBB\r\n     * @static\r\n     */\r\n    combineRGBComponents: function (r, g, b /*, a*/) {\r\n        return /*a << 24 |*/ r << 16 | g << 8 | b;\r\n    },\r\n    /**\r\n     * Reduces the point to a length of 1.\r\n     * @method PIXI.particles.ParticleUtils.normalize\r\n     * @static\r\n     * @param {PIXI.Point} point The point to normalize\r\n     */\r\n    normalize: function (point) {\r\n        var oneOverLen = 1 / ParticleUtils.length(point);\r\n        point.x *= oneOverLen;\r\n        point.y *= oneOverLen;\r\n    },\r\n    /**\r\n     * Multiplies the x and y values of this point by a value.\r\n     * @method PIXI.particles.ParticleUtils.scaleBy\r\n     * @static\r\n     * @param {PIXI.Point} point The point to scaleBy\r\n     * @param {number} value The value to scale by.\r\n     */\r\n    scaleBy: function (point, value) {\r\n        point.x *= value;\r\n        point.y *= value;\r\n    },\r\n    /**\r\n     * Returns the length (or magnitude) of this point.\r\n     * @method PIXI.particles.ParticleUtils.length\r\n     * @static\r\n     * @param {PIXI.Point} point The point to measure length\r\n     * @return The length of this point.\r\n     */\r\n    length: function (point) {\r\n        return Math.sqrt(point.x * point.x + point.y * point.y);\r\n    },\r\n    /**\r\n     * Converts a hex string from \"#AARRGGBB\", \"#RRGGBB\", \"0xAARRGGBB\", \"0xRRGGBB\",\r\n     * \"AARRGGBB\", or \"RRGGBB\" to an object of ints of 0-255, as\r\n     * {r, g, b, (a)}.\r\n     * @method PIXI.particles.ParticleUtils.hexToRGB\r\n     * @param {string} color The input color string.\r\n     * @param {Object} [output] An object to put the output in. If omitted, a new object is created.\r\n     * @return The object with r, g, and b properties, possibly with an a property.\r\n     * @static\r\n     */\r\n    hexToRGB: function (color, output) {\r\n        if (!output)\r\n            output = {};\r\n        if (color.charAt(0) == \"#\")\r\n            color = color.substr(1);\r\n        else if (color.indexOf(\"0x\") === 0)\r\n            color = color.substr(2);\r\n        var alpha;\r\n        if (color.length == 8) {\r\n            alpha = color.substr(0, 2);\r\n            color = color.substr(2);\r\n        }\r\n        output.r = parseInt(color.substr(0, 2), 16); //Red\r\n        output.g = parseInt(color.substr(2, 2), 16); //Green\r\n        output.b = parseInt(color.substr(4, 2), 16); //Blue\r\n        if (alpha)\r\n            output.a = parseInt(alpha, 16);\r\n        return output;\r\n    },\r\n    /**\r\n     * Generates a custom ease function, based on the GreenSock custom ease, as demonstrated\r\n     * by the related tool at http://www.greensock.com/customease/.\r\n     * @method PIXI.particles.ParticleUtils.generateEase\r\n     * @param {Array} segments An array of segments, as created by\r\n     * http://www.greensock.com/customease/.\r\n     * @return {Function} A function that calculates the percentage of change at\r\n     *                    a given point in time (0-1 inclusive).\r\n     * @static\r\n     */\r\n    generateEase: function (segments) {\r\n        var qty = segments.length;\r\n        var oneOverQty = 1 / qty;\r\n        /*\r\n         * Calculates the percentage of change at a given point in time (0-1 inclusive).\r\n         * @param {Number} time The time of the ease, 0-1 inclusive.\r\n         * @return {Number} The percentage of the change, 0-1 inclusive (unless your\r\n         *                  ease goes outside those bounds).\r\n         */\r\n        return function (time) {\r\n            var t, s;\r\n            var i = (qty * time) | 0; //do a quick floor operation\r\n            t = (time - (i * oneOverQty)) * qty;\r\n            s = segments[i] || segments[qty - 1];\r\n            return (s.s + t * (2 * (1 - t) * (s.cp - s.s) + t * (s.e - s.s)));\r\n        };\r\n    },\r\n    /**\r\n     * Gets a blend mode, ensuring that it is valid.\r\n     * @method PIXI.particles.ParticleUtils.getBlendMode\r\n     * @param {string} name The name of the blend mode to get.\r\n     * @return {int} The blend mode as specified in the PIXI.BLEND_MODES enumeration.\r\n     * @static\r\n     */\r\n    getBlendMode: function (name) {\r\n        if (!name)\r\n            return BLEND_MODES.NORMAL;\r\n        name = name.toUpperCase();\r\n        while (name.indexOf(\" \") >= 0)\r\n            name = name.replace(\" \", \"_\");\r\n        return BLEND_MODES[name] || BLEND_MODES.NORMAL;\r\n    },\r\n    /**\r\n     * Converts a list of {value, time} objects starting at time 0 and ending at time 1 into an evenly\r\n     * spaced stepped list of PropertyNodes for color values. This is primarily to handle conversion of\r\n     * linear gradients to fewer colors, allowing for some optimization for Canvas2d fallbacks.\r\n     * @method PIXI.particles.ParticleUtils.createSteppedGradient\r\n     * @param {Array} list The list of data to convert.\r\n     * @param {number} [numSteps=10] The number of steps to use.\r\n     * @return {PIXI.particles.PropertyNode} The blend mode as specified in the PIXI.blendModes enumeration.\r\n     * @static\r\n     */\r\n    createSteppedGradient: function (list, numSteps) {\r\n        if (numSteps === void 0) { numSteps = 10; }\r\n        if (typeof numSteps !== 'number' || numSteps <= 0)\r\n            numSteps = 10;\r\n        var first = new PropertyNode_1.default(list[0].value, list[0].time);\r\n        first.isStepped = true;\r\n        var currentNode = first;\r\n        var current = list[0];\r\n        var nextIndex = 1;\r\n        var next = list[nextIndex];\r\n        for (var i = 1; i < numSteps; ++i) {\r\n            var lerp = i / numSteps;\r\n            //ensure we are on the right segment, if multiple\r\n            while (lerp > next.time) {\r\n                current = next;\r\n                next = list[++nextIndex];\r\n            }\r\n            //convert the lerp value to the segment range\r\n            lerp = (lerp - current.time) / (next.time - current.time);\r\n            var curVal = ParticleUtils.hexToRGB(current.value);\r\n            var nextVal = ParticleUtils.hexToRGB(next.value);\r\n            var output = {};\r\n            output.r = (nextVal.r - curVal.r) * lerp + curVal.r;\r\n            output.g = (nextVal.g - curVal.g) * lerp + curVal.g;\r\n            output.b = (nextVal.b - curVal.b) * lerp + curVal.b;\r\n            currentNode.next = new PropertyNode_1.default(output, i / numSteps);\r\n            currentNode = currentNode.next;\r\n        }\r\n        //we don't need to have a PropertyNode for time of 1, because in a stepped version at that point\r\n        //the particle has died of old age\r\n        return first;\r\n    }\r\n};\r\nexports.default = ParticleUtils;\r\n\r\n},{\"./PropertyNode\":8}],5:[function(_dereq_,module,exports){\r\n\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ParticleUtils_1 = _dereq_(\"./ParticleUtils\");\r\nvar Particle_1 = _dereq_(\"./Particle\");\r\n/**\r\n * A helper point for math things.\r\n * @private\r\n */\r\nvar helperPoint = new PIXI.Point();\r\n//a hand picked list of Math functions (and a couple properties) that are allowable.\r\n//they should be used without the preceding \"Math.\"\r\nvar MATH_FUNCS = [\r\n    \"pow\",\r\n    \"sqrt\",\r\n    \"abs\",\r\n    \"floor\",\r\n    \"round\",\r\n    \"ceil\",\r\n    \"E\",\r\n    \"PI\",\r\n    \"sin\",\r\n    \"cos\",\r\n    \"tan\",\r\n    \"asin\",\r\n    \"acos\",\r\n    \"atan\",\r\n    \"atan2\",\r\n    \"log\"\r\n];\r\n//create an actual regular expression object from the string\r\nvar WHITELISTER = new RegExp([\r\n    //Allow the 4 basic operations, parentheses and all numbers/decimals, as well\r\n    //as 'x', for the variable usage.\r\n    \"[01234567890\\\\.\\\\*\\\\-\\\\+\\\\/\\\\(\\\\)x ,]\",\r\n].concat(MATH_FUNCS).join(\"|\"), \"g\");\r\n/**\r\n * Parses a string into a function for path following.\r\n * This involves whitelisting the string for safety, inserting \"Math.\" to math function\r\n * names, and using `new Function()` to generate a function.\r\n * @method PIXI.particles.PathParticle~parsePath\r\n * @private\r\n * @static\r\n * @param {String} pathString The string to parse.\r\n * @return {Function} The path function - takes x, outputs y.\r\n */\r\nvar parsePath = function (pathString) {\r\n    var matches = pathString.match(WHITELISTER);\r\n    for (var i = matches.length - 1; i >= 0; --i) {\r\n        if (MATH_FUNCS.indexOf(matches[i]) >= 0)\r\n            matches[i] = \"Math.\" + matches[i];\r\n    }\r\n    pathString = matches.join(\"\");\r\n    return new Function(\"x\", \"return \" + pathString + \";\");\r\n};\r\n/**\r\n * An particle that follows a path defined by an algebraic expression, e.g. \"sin(x)\" or\r\n * \"5x + 3\".\r\n * To use this class, the particle config must have a \"path\" string in the\r\n * \"extraData\" parameter. This string should have \"x\" in it to represent movement (from the\r\n * speed settings of the particle). It may have numbers, parentheses, the four basic\r\n * operations, and the following Math functions or properties (without the preceding \"Math.\"):\r\n * \"pow\", \"sqrt\", \"abs\", \"floor\", \"round\", \"ceil\", \"E\", \"PI\", \"sin\", \"cos\", \"tan\", \"asin\",\r\n * \"acos\", \"atan\", \"atan2\", \"log\".\r\n * The overall movement of the particle and the expression value become x and y positions for\r\n * the particle, respectively. The final position is rotated by the spawn rotation/angle of\r\n * the particle.\r\n *\r\n * Some example paths:\r\n *\r\n * \t\"sin(x/10) * 20\" // A sine wave path.\r\n * \t\"cos(x/100) * 30\" // Particles curve counterclockwise (for medium speed/low lifetime particles)\r\n * \t\"pow(x/10, 2) / 2\" // Particles curve clockwise (remember, +y is down).\r\n *\r\n * @memberof PIXI.particles\r\n * @class PathParticle\r\n * @extends PIXI.particles.Particle\r\n * @constructor\r\n * @param {PIXI.particles.Emitter} emitter The emitter that controls this PathParticle.\r\n */\r\nvar PathParticle = /** @class */ (function (_super) {\r\n    __extends(PathParticle, _super);\r\n    function PathParticle(emitter) {\r\n        var _this = _super.call(this, emitter) || this;\r\n        _this.path = null;\r\n        _this.initialRotation = 0;\r\n        _this.initialPosition = new PIXI.Point();\r\n        _this.movement = 0;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Initializes the particle for use, based on the properties that have to\r\n     * have been set already on the particle.\r\n     * @method PIXI.particles.PathParticle#init\r\n     */\r\n    PathParticle.prototype.init = function () {\r\n        //get initial rotation before it is converted to radians\r\n        this.initialRotation = this.rotation;\r\n        //standard init\r\n        this.Particle_init();\r\n        //set the path for the particle\r\n        this.path = this.extraData.path;\r\n        //cancel the normal movement behavior\r\n        this._doNormalMovement = !this.path;\r\n        //reset movement\r\n        this.movement = 0;\r\n        //grab position\r\n        this.initialPosition.x = this.position.x;\r\n        this.initialPosition.y = this.position.y;\r\n    };\r\n    /**\r\n     * Updates the particle.\r\n     * @method PIXI.particles.PathParticle#update\r\n     * @param {Number} delta Time elapsed since the previous frame, in __seconds__.\r\n     */\r\n    PathParticle.prototype.update = function (delta) {\r\n        var lerp = this.Particle_update(delta);\r\n        //if the particle died during the update, then don't bother\r\n        if (lerp >= 0 && this.path) {\r\n            //increase linear movement based on speed\r\n            var speed = this.speedList.interpolate(lerp) * this.speedMultiplier;\r\n            this.movement += speed * delta;\r\n            //set up the helper point for rotation\r\n            helperPoint.x = this.movement;\r\n            helperPoint.y = this.path(this.movement);\r\n            ParticleUtils_1.default.rotatePoint(this.initialRotation, helperPoint);\r\n            this.position.x = this.initialPosition.x + helperPoint.x;\r\n            this.position.y = this.initialPosition.y + helperPoint.y;\r\n        }\r\n        return lerp;\r\n    };\r\n    /**\r\n     * Destroys the particle, removing references and preventing future use.\r\n     * @method PIXI.particles.PathParticle#destroy\r\n     */\r\n    PathParticle.prototype.destroy = function () {\r\n        this.Particle_destroy();\r\n        this.path = this.initialPosition = null;\r\n    };\r\n    /**\r\n     * Checks over the art that was passed to the Emitter's init() function, to do any special\r\n     * modifications to prepare it ahead of time. This just runs Particle.parseArt().\r\n     * @method PIXI.particles.PathParticle.parseArt\r\n     * @static\r\n     * @param  {Array} art The array of art data. For Particle, it should be an array of Textures.\r\n     *                     Any strings in the array will be converted to Textures via\r\n     *                     Texture.fromImage().\r\n     * @return {Array} The art, after any needed modifications.\r\n     */\r\n    PathParticle.parseArt = function (art) {\r\n        return Particle_1.default.parseArt(art);\r\n    };\r\n    /**\r\n     * Parses extra emitter data to ensure it is set up for this particle class.\r\n     * PathParticle checks for the existence of path data, and parses the path data for use\r\n     * by particle instances.\r\n     * @method PIXI.particles.PathParticle.parseData\r\n     * @static\r\n     * @param  {Object} extraData The extra data from the particle config.\r\n     * @return {Object} The parsed extra data.\r\n     */\r\n    PathParticle.parseData = function (extraData) {\r\n        var output = {};\r\n        if (extraData && extraData.path) {\r\n            try {\r\n                output.path = parsePath(extraData.path);\r\n            }\r\n            catch (e) {\r\n                if (ParticleUtils_1.default.verbose)\r\n                    console.error(\"PathParticle: error in parsing path expression\");\r\n                output.path = null;\r\n            }\r\n        }\r\n        else {\r\n            if (ParticleUtils_1.default.verbose)\r\n                console.error(\"PathParticle requires a path string in extraData!\");\r\n            output.path = null;\r\n        }\r\n        return output;\r\n    };\r\n    return PathParticle;\r\n}(Particle_1.default));\r\nexports.default = PathParticle;\r\n\r\n},{\"./Particle\":3,\"./ParticleUtils\":4}],6:[function(_dereq_,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Chain of line segments for generating spawn positions.\r\n * @memberof PIXI.particles\r\n * @class PolygonalChain\r\n * @constructor\r\n * @param {{x:number,y:number}[]|{x:number,y:number}[]} data Point data for polygon chains. Either a list of points for a single chain, or a list of chains.\r\n */\r\nvar PolygonalChain = /** @class */ (function () {\r\n    function PolygonalChain(data) {\r\n        this.segments = [];\r\n        this.countingLengths = [];\r\n        this.totalLength = 0;\r\n        this.init(data);\r\n    }\r\n    PolygonalChain.prototype.init = function (data) {\r\n        // if data is not present, set up a segment of length 0\r\n        if (!data || !data.length) {\r\n            this.segments.push({ p1: { x: 0, y: 0 }, p2: { x: 0, y: 0 }, l: 0 });\r\n        }\r\n        else {\r\n            if (Array.isArray(data[0])) {\r\n                // list of segment chains, each defined as a list of points\r\n                for (var i = 0; i < data.length; ++i) {\r\n                    // loop through the chain, connecting points\r\n                    var chain = data[i];\r\n                    var prevPoint = chain[0];\r\n                    for (var j = 1; j < chain.length; ++j) {\r\n                        var second = chain[j];\r\n                        this.segments.push({ p1: prevPoint, p2: second, l: 0 });\r\n                        prevPoint = second;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                var prevPoint = data[0];\r\n                // list of points\r\n                for (var i = 1; i < data.length; ++i) {\r\n                    var second = data[i];\r\n                    this.segments.push({ p1: prevPoint, p2: second, l: 0 });\r\n                    prevPoint = second;\r\n                }\r\n            }\r\n        }\r\n        // now go through our segments to calculate the lengths so that we\r\n        // can set up a nice weighted random distribution\r\n        for (var i = 0; i < this.segments.length; ++i) {\r\n            var _a = this.segments[i], p1 = _a.p1, p2 = _a.p2;\r\n            var segLength = Math.sqrt((p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y));\r\n            // save length so we can turn a random number into a 0-1 interpolation value later\r\n            this.segments[i].l = segLength;\r\n            this.totalLength += segLength;\r\n            // keep track of the length so far, counting up\r\n            this.countingLengths.push(this.totalLength);\r\n        }\r\n    };\r\n    /**\r\n     * Gets a random point in the chain.\r\n     * @method getRandomPoint\r\n     * @param {PIXI.Point} out The point to store the selected position in.\r\n     */\r\n    PolygonalChain.prototype.getRandomPoint = function (out) {\r\n        // select a random spot in the length of the chain\r\n        var rand = Math.random() * this.totalLength;\r\n        var chosenSeg;\r\n        var lerp;\r\n        // if only one segment, it wins\r\n        if (this.segments.length === 1) {\r\n            chosenSeg = this.segments[0];\r\n            lerp = rand;\r\n        }\r\n        else {\r\n            // otherwise, go through countingLengths until we have determined\r\n            // which segment we chose\r\n            for (var i = 0; i < this.countingLengths.length; ++i) {\r\n                if (rand < this.countingLengths[i]) {\r\n                    chosenSeg = this.segments[i];\r\n                    // set lerp equal to the length into that segment (i.e. the remainder after subtracting all the segments before it)\r\n                    lerp = i === 0 ? rand : rand - this.countingLengths[i - 1];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        // divide lerp by the segment length, to result in a 0-1 number.\r\n        lerp /= chosenSeg.l || 1;\r\n        var p1 = chosenSeg.p1, p2 = chosenSeg.p2;\r\n        // now calculate the position in the segment that the lerp value represents\r\n        out.x = p1.x + lerp * (p2.x - p1.x);\r\n        out.y = p1.y + lerp * (p2.y - p1.y);\r\n    };\r\n    return PolygonalChain;\r\n}());\r\nexports.default = PolygonalChain;\r\n\r\n},{}],7:[function(_dereq_,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ParticleUtils_1 = _dereq_(\"./ParticleUtils\");\r\n/**\r\n * Singly linked list container for keeping track of interpolated properties for particles.\r\n * Each Particle will have one of these for each interpolated property.\r\n * @memberof PIXI.particles\r\n * @class PropertyList\r\n * @constructor\r\n * @param {boolean} isColor If this list handles color values\r\n */\r\nvar PropertyList = /** @class */ (function () {\r\n    function PropertyList(isColor) {\r\n        if (isColor === void 0) { isColor = false; }\r\n        this.current = null;\r\n        this.next = null;\r\n        this.isColor = !!isColor;\r\n        this.interpolate = null;\r\n        this.ease = null;\r\n    }\r\n    /**\r\n     * Resets the list for use.\r\n     * @method interpolate\r\n     * @param {PIXI.particles.PropertyNode} first The first node in the list.\r\n     * @param {boolean} [isStepped=false] If the values should be stepped instead of interpolated linearly.\r\n     */\r\n    PropertyList.prototype.reset = function (first) {\r\n        this.current = first;\r\n        this.next = first.next;\r\n        var isSimple = this.next && this.next.time >= 1;\r\n        if (isSimple) {\r\n            this.interpolate = this.isColor ? intColorSimple : intValueSimple;\r\n        }\r\n        else if (first.isStepped) {\r\n            this.interpolate = this.isColor ? intColorStepped : intValueStepped;\r\n        }\r\n        else {\r\n            this.interpolate = this.isColor ? intColorComplex : intValueComplex;\r\n        }\r\n        this.ease = this.current.ease;\r\n    };\r\n    return PropertyList;\r\n}());\r\nexports.default = PropertyList;\r\nfunction intValueSimple(lerp) {\r\n    if (this.ease)\r\n        lerp = this.ease(lerp);\r\n    return (this.next.value - this.current.value) * lerp + this.current.value;\r\n}\r\nfunction intColorSimple(lerp) {\r\n    if (this.ease)\r\n        lerp = this.ease(lerp);\r\n    var curVal = this.current.value, nextVal = this.next.value;\r\n    var r = (nextVal.r - curVal.r) * lerp + curVal.r;\r\n    var g = (nextVal.g - curVal.g) * lerp + curVal.g;\r\n    var b = (nextVal.b - curVal.b) * lerp + curVal.b;\r\n    return ParticleUtils_1.default.combineRGBComponents(r, g, b);\r\n}\r\nfunction intValueComplex(lerp) {\r\n    if (this.ease)\r\n        lerp = this.ease(lerp);\r\n    //make sure we are on the right segment\r\n    while (lerp > this.next.time) {\r\n        this.current = this.next;\r\n        this.next = this.next.next;\r\n    }\r\n    //convert the lerp value to the segment range\r\n    lerp = (lerp - this.current.time) / (this.next.time - this.current.time);\r\n    return (this.next.value - this.current.value) * lerp + this.current.value;\r\n}\r\nfunction intColorComplex(lerp) {\r\n    if (this.ease)\r\n        lerp = this.ease(lerp);\r\n    //make sure we are on the right segment\r\n    while (lerp > this.next.time) {\r\n        this.current = this.next;\r\n        this.next = this.next.next;\r\n    }\r\n    //convert the lerp value to the segment range\r\n    lerp = (lerp - this.current.time) / (this.next.time - this.current.time);\r\n    var curVal = this.current.value, nextVal = this.next.value;\r\n    var r = (nextVal.r - curVal.r) * lerp + curVal.r;\r\n    var g = (nextVal.g - curVal.g) * lerp + curVal.g;\r\n    var b = (nextVal.b - curVal.b) * lerp + curVal.b;\r\n    return ParticleUtils_1.default.combineRGBComponents(r, g, b);\r\n}\r\nfunction intValueStepped(lerp) {\r\n    if (this.ease)\r\n        lerp = this.ease(lerp);\r\n    //make sure we are on the right segment\r\n    while (this.next && lerp > this.next.time) {\r\n        this.current = this.next;\r\n        this.next = this.next.next;\r\n    }\r\n    return this.current.value;\r\n}\r\nfunction intColorStepped(lerp) {\r\n    if (this.ease)\r\n        lerp = this.ease(lerp);\r\n    //make sure we are on the right segment\r\n    while (this.next && lerp > this.next.time) {\r\n        this.current = this.next;\r\n        this.next = this.next.next;\r\n    }\r\n    var curVal = this.current.value;\r\n    return ParticleUtils_1.default.combineRGBComponents(curVal.r, curVal.g, curVal.b);\r\n}\r\n\r\n},{\"./ParticleUtils\":4}],8:[function(_dereq_,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ParticleUtils_1 = _dereq_(\"./ParticleUtils\");\r\n/**\r\n * A single node in a PropertyList.\r\n * @memberof PIXI.particles\r\n * @class PropertyNode\r\n * @constructor\r\n * @param {number|string} value The value for this node\r\n * @param {number} time The time for this node, between 0-1\r\n * @param {Function|Array} [ease] Custom ease for this list. Only relevant for the first node.\r\n */\r\nvar PropertyNode = /** @class */ (function () {\r\n    function PropertyNode(value, time, ease) {\r\n        this.value = typeof value == \"string\" ? ParticleUtils_1.default.hexToRGB(value) : value;\r\n        this.time = time;\r\n        this.next = null;\r\n        this.isStepped = false;\r\n        if (ease) {\r\n            this.ease = typeof ease == \"function\" ? ease : ParticleUtils_1.default.generateEase(ease);\r\n        }\r\n        else {\r\n            this.ease = null;\r\n        }\r\n    }\r\n    /**\r\n     * Creates a list of property values from a data object {list, isStepped} with a list of objects in\r\n     * the form {value, time}. Alternatively, the data object can be in the deprecated form of\r\n     * {start, end}.\r\n     * @method PIXI.particles.PropertyNode.createListFromArray\r\n     * @static\r\n     * @param  {Object} data The data for the list.\r\n     * @param  {Array} data.list The array of value and time objects.\r\n     * @param  {boolean} [data.isStepped] If the list is stepped rather than interpolated.\r\n     * @param  {Function|Array} [data.ease] Custom ease for this list.\r\n     * @return {PIXI.particles.PropertyNode} The first node in the list\r\n     */\r\n    PropertyNode.createList = function (data) {\r\n        if (Array.isArray(data.list)) {\r\n            var array = data.list;\r\n            var node = void 0, first = void 0;\r\n            first = node = new PropertyNode(array[0].value, array[0].time, data.ease);\r\n            //only set up subsequent nodes if there are a bunch or the 2nd one is different from the first\r\n            if (array.length > 2 || (array.length === 2 && array[1].value !== array[0].value)) {\r\n                for (var i = 1; i < array.length; ++i) {\r\n                    node.next = new PropertyNode(array[i].value, array[i].time);\r\n                    node = node.next;\r\n                }\r\n            }\r\n            first.isStepped = !!data.isStepped;\r\n            return first;\r\n        }\r\n        else {\r\n            //Handle deprecated version here\r\n            var start = new PropertyNode(data.start, 0);\r\n            //only set up a next value if it is different from the starting value\r\n            if (data.end !== data.start)\r\n                start.next = new PropertyNode(data.end, 1);\r\n            return start;\r\n        }\r\n    };\r\n    return PropertyNode;\r\n}());\r\nexports.default = PropertyNode;\r\n\r\n},{\"./ParticleUtils\":4}],9:[function(_dereq_,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ParticleUtils_js_1 = _dereq_(\"./ParticleUtils.js\");\r\nexports.ParticleUtils = ParticleUtils_js_1.default;\r\nvar Particle_js_1 = _dereq_(\"./Particle.js\");\r\nexports.Particle = Particle_js_1.default;\r\nvar Emitter_js_1 = _dereq_(\"./Emitter.js\");\r\nexports.Emitter = Emitter_js_1.default;\r\nvar PathParticle_js_1 = _dereq_(\"./PathParticle.js\");\r\nexports.PathParticle = PathParticle_js_1.default;\r\nvar AnimatedParticle_js_1 = _dereq_(\"./AnimatedParticle.js\");\r\nexports.AnimatedParticle = AnimatedParticle_js_1.default;\r\n\r\n},{\"./AnimatedParticle.js\":1,\"./Emitter.js\":2,\"./Particle.js\":3,\"./ParticleUtils.js\":4,\"./PathParticle.js\":5}],10:[function(_dereq_,module,exports){\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// If we're in the browser make sure PIXI is available\r\nif (typeof PIXI === 'undefined') {\r\n    throw \"pixi-particles requires pixi.js to be loaded first\";\r\n}\r\n//ensure that the particles namespace exist - PIXI 4 creates it itself, PIXI 3 does not\r\nif (!PIXI.particles) {\r\n    PIXI.particles = {};\r\n}\r\n// get the library itself\r\nvar particles = _dereq_(\"./particles\");\r\n// insert the library into the particles namespace on PIXI\r\nfor (var prop in particles) {\r\n    PIXI.particles[prop] = particles[prop];\r\n}\r\nif (typeof module !== \"undefined\" && module.exports) {\r\n    module.exports = particles;\r\n}\r\n\r\n},{\"./particles\":9}]},{},[10])(10)\r\n});\r\n\r\n\r\n//# sourceMappingURL=pixi-particles.js.map\r\n"]}